}
gen.1 <- cbind(gen.1, as.data.frame(employment))
remove(employment)
remove(matches.health)
remove(matches.adminbusiness)
remove(matches.scienceacadaemia)
column.names <- c(column.names, "Field.of.employment")
# Pop the column names in properly
colnames(gen.1) <- c(column.names)
View(gen.1)
View(gen.0)
gen.0 <- read.ods(file = "/media/sf_Dropbox/Research/Unimelb/rfelis/data_survey/survey_data_2015.ods", sheet = 1)
library(readODS)
gen.0 <- read.ods(file = "/media/sf_Dropbox/Research/Unimelb/rfelis/data_survey/survey_data_2015.ods", sheet = 1)
vet.0 <- read.ods(file = "/media/sf_Dropbox/Research/Unimelb/rfelis/data_survey/survey_data_2015.ods", sheet = 2)
# Column 1: Reference.ID
gen.1 <- as.data.frame(gen.0[2:nrow(gen.0),1])
column.names <- make.names(gen.0[1,1]) # Make syntactically correct column name, save as variable to put in later
# Column 2: Date
gen.1 <- cbind(gen.1, as.data.frame(gen.0[2:nrow(gen.0),2]))
column.names <- c(column.names, make.names(gen.0[1,2]))
# Column 3: Name
gen.1 <- cbind(gen.1, as.data.frame(gen.0[2:nrow(gen.0),3]))
column.names <- c(column.names, make.names(gen.0[1,3]))
# Column 4: Does the participant require blood results?
gen.1 <- cbind(gen.1, as.data.frame(gen.0[2:nrow(gen.0),4] == "y"))
column.names <- c(column.names, make.names(gen.0[1,4]))
# Column 5: Does the participant want a summary of the research findings?
gen.1 <- cbind(gen.1, as.data.frame(gen.0[2:nrow(gen.0),5] == "y"))
column.names <- c(column.names, make.names(gen.0[1,5]))
# Column 6: Participant's contact details
gen.1 <- cbind(gen.1, as.data.frame(gen.0[2:nrow(gen.0),6]))
column.names <- c(column.names, make.names(gen.0[1,6]))
# Column 7: Sex (m/f)
gen.1 <- cbind(gen.1, as.data.frame(gen.0[2:nrow(gen.0),8]))
column.names <- c(column.names, "Sex")
# Column 8: Age (years)
gen.1 <- cbind(gen.1, as.data.frame(gen.0[2:nrow(gen.0),9]))
column.names <- c(column.names, "Age")
# Column 9: Field of employment
employment <- vector()
matches.adminbusiness <- c("*(A|a)dmin*", "*(O|o)fficer*", "*(M|m)anager*", "*(C|c)oordinator*", "*(S|s)ales*")
matches.scienceacadaemia <- c("*(S|s)cien*", "*(L|l)aboratory*", "*(R|r)esearch*", "*(S|s)tudent*", "*(T|t)eacher*", "*(P|p)rofessor*", "*(B|b)ioinf*", "*(B|b)iotech*", "*(P|p)ost doc*")
matches.health <- c("*(D|d)octor*", "*(N|n)urse*", "*(P|p)harm*", "*(P|p)hysio*")
for (i in 2:nrow(gen.0)) {
if (grepl(pattern = paste(matches.adminbusiness, collapse = "|"), gen.0[i,10])) {
employment <- c(employment, "admin/business")
}
else if (grepl(pattern = paste(matches.scienceacadaemia, collapse = "|"), gen.0[i,10])) {
employment <- c(employment, "science/acadaemia")
}
else if (grepl(pattern = paste(matches.health, collapse = "|"), gen.0[i,10])) {
employment <- c(employment, "health")
}
else {
employment <- c(employment, "uncategorised")
}
}
gen.1 <- cbind(gen.1, as.data.frame(employment))
column.names <- c(column.names, "Field.of.employment")
### Tidying up variables
remove(employment)
remove(matches.health)
remove(matches.adminbusiness)
remove(matches.scienceacadaemia)
# Column 8: Age (years)
gen.1 <- cbind(gen.1, as.data.frame(gen.0[2:nrow(gen.0),12]))
column.names <- c(column.names, "Post.Code")
# Pop the column names in properly
colnames(gen.1) <- c(column.names)
View(gen.1)
read.csv(unz("activity.zip", "activity.csv"))
setwd("/media/sf_Dropbox/Technology/R/coursera/5 Reproducible Research/assignment1/RepData_PeerAssessment1")
read.csv(unz("activity.zip", "activity.csv"))
activity.0 <- read.csv(unz("activity.zip", "activity.csv"))
View(activity.0)
require(data.table)
activity[,list(avg=mean(steps)),by=date]
activity.0[,list(avg=mean(steps)),by=date]
activity.0[,list(avg=mean(steps)),by= "date""]
"
activity.0[,list(avg=mean(steps)),by= "date"]
activity.0[,list(avg=mean(steps)),by=date]
data.table(activity.0)[,list(avg=mean(steps)),by=date]
data.table(activity.0)[,list(avg=sum(steps)),by=date]
activity.bydate <- data.table(activity.0)[,list(avg=sum(steps)),by=date]
mean(activity.bydate$avg)
?data.table
activity.bydate <- data.table(na.omit(activity.0))[,list(avg=sum(steps)),by=date]
mean(activity.bydate$avg)
activity.bydate <- data.table(na.omit(activity.0))[, list(sum(steps)), by = date]
mean(activity.bydate$avg)
activity.bydate <- data.table(na.omit(activity.0))[, list(avg = sum(steps)), by = date]
mean(activity.bydate$avg)
activity.1 <- na.omit(activity.0) # Data set with NA omitted
activity.bydate <- data.table(activity.1)[, list(avg = sum(steps)), by = date]
activity.bydate
median(activity.bydate$avg)
mean(activity.bydate$avg)
activity.bydate <- data.table(activity.1)[, list(total = sum(steps)), by = date]
activity.bydate <- data.table(activity.1)[, list(total.steps = sum(steps)), by = date]
mean(activity.bydate$total.steps)
median(activity.bydate$total.steps)
hist(activity.bydate)
hist(activity.bydate)
View(activity.bydate)
activity.0$date <- as.date(activity.0$date)
activity.0$date <- as.Date(activity.0$date)
activity.1 <- na.omit(activity.0) # Data set with NA omitted
activity.bydate <- data.table(activity.1)[, list(total.steps = sum(steps)), by = date]
activity.bydate
hist(activity.bydate)
hist(scan(activity.bydate))
score(activity.bydate)
activity.bydate <- as.data.frame(data.table(activity.1)[, list(total.steps = sum(steps)), by = date])
activity.bydate
hist(activity.bydate)
hist(activity.bydate$total.steps)
activity.bydate$total.steps <- as.numeric(activity.bydate$total.steps)
hist(activity.bydate$total.steps)
hist(activity.bydate)
activity.bydate$date <- as.Date(activity.bydate$date)
hist(activity.bydate)
hist(activity.bydate, "weeks", format = "%y-%m-%d")
hist(activity.bydate, "days", format = "%y-%m-%d")
?hist(activity.bydate)
hist(activity.bydate$total.steps, breaks = "date")
hist(activity.bydate$total.steps)
hist(activity.bydate$date)
hist(activity.bydate$date, breaks = "Sturges")
hist(activity.bydate$date, breaks = "date")
hist(activity.bydate$date, breaks = date)
hist(activity.bydate$total.steps ~ activity.bydate$date)
hist(activity.bydate$date ~ activity.bydate$total.steps)
activity.bydate$date <- as.Date(activity.bydate$date)
hist(activity.bydate$date ~ activity.bydate$total.steps)
activity.bydate$date
?hist.Date
hist.Date(activity.bydate$date ~ activity.bydate$total.steps)
library(hist.POSIXt)
install.packages("hist.POSIXt")
library(ggplot2)
ggplot(activity.bydate$total.steps, aes(activity.bydate$date)) +
geom_histogram()
activity.bydate <- data.table(activity.1)[, list(total.steps = sum(steps)), by = date]
activity.bydate
activity.bydate$date <- as.Date(activity.bydate$date)
ggplot(activity.bydate$total.steps, aes(activity.bydate$date)) +
geom_histogram()
ggplot(activity.bydate, aes(activity.bydate$date)) +
geom_histogram()
ggplot(activity.bydate) +
geom_histogram()
str(activity.bydate)
hist(activity.bydate$total.steps)
hist(activity.bydate$total.steps, freq = TRUE)
hist(activity.bydate$total.steps, freq = FALSE)
ggplot(activity.bydate$total.steps, aes(x = activity.bydate$total.steps)) +
geom_histogram(fill = "firebrick", binwidth = 1000) +
labs(title = "Histogram of Steps per day", x = "Steps per day", y = "Frequency")
ggplot(activity.bydate, aes(x = total.steps)) +
geom_histogram(fill = "firebrick", binwidth = 1000) +
labs(title = "Histogram of Steps per day", x = "Steps per day", y = "Frequency")
qplot(activity.bydate, xlab='Total steps per day', ylab='Frequency using binwith 500', binwidth=500)
qplot(activity.bydate$total.steps, xlab='Total steps per day', ylab='Frequency using binwith 500', binwidth=500)
ggplot(activity.bydate, aes(x = total.steps)) +
geom_histogram(fill = "firebrick", binwidth = 1000) +
labs(title = "Histogram of Steps per day", x = "Steps per day", y = "Frequency")
ggplot(activity.bydate, aes(x = total.steps)) +
geom_histogram(binwidth = 500) +
labs(title = "Histogram of Steps per day", x = "Steps per day", y = "Frequency")
ggplot(activity.bydate, aes(x = total.steps)) +
geom_histogram(binwidth = 1500) +
labs(title = "Histogram of Steps per day", x = "Steps per day", y = "Frequency")
ggplot(activity.bydate, aes(x = total.steps)) +
geom_histogram(binwidth = 1000) +
labs(title = "Histogram of Steps per day", x = "Steps per day", y = "Frequency")
activity.bydate <- data.table(activity.1)[, list(total.steps = sum(steps)), by = date]
ggplot(activity.bydate, aes(x = total.steps)) +
geom_histogram(binwidth = 1000) +
labs(title = "Total number of steps taken each day", x = "Steps per day", y = "Frequency")
hist(activity.bydate$total.steps)
hist(activity.bydate$total.steps, breaks = 1000)
hist(activity.bydate$total.steps, breaks = 500)
hist(activity.bydate$total.steps, breaks = 200)
hist(activity.bydate$total.steps, breaks = 100)
hist(activity.bydate$total.steps, breaks = 50)
ggplot(activity.bydate, aes(x = total.steps)) +
geom_histogram(binwidth = 1000) +
labs(title = "Total number of steps taken each day", x = "Steps per day", y = "Frequency")
hist(activity.bydate$total.steps, breaks = 50)
ggplot(activity.bydate, aes(x = total.steps)) +
geom_histogram(binwidth = 1000) +
labs(title = "Total number of steps taken each day", x = "Steps per day", y = "Frequency")
hist(activity.bydate$total.steps, breaks = 50)
hist(activity.bydate$total.steps, breaks = 50, xlab = "Steps per day", main = "Total number of steps taken each day")
ggplot(activity.bydate, aes(x = total.steps)) +
geom_histogram(binwidth = 1000) +
labs(title = "Total number of steps taken each day", x = "Steps per day", y = "Frequency")
hist(activity.bydate$total.steps, breaks = 50, xlab = "Steps per day", main = "Total number of steps taken each day")
hist(activity.bydate$total.steps, breaks = 40, xlab = "Steps per day", main = "Total number of steps taken each day")
hist(activity.bydate$total.steps, breaks = 30, xlab = "Steps per day", main = "Total number of steps taken each day")
hist(activity.bydate$total.steps, breaks = 50, xlab = "Steps per day", main = "Total number of steps taken each day")
hist(activity.bydate$total.steps, breaks = 20, xlab = "Steps per day", main = "Total number of steps taken each day")
View(activity.0)
as.POSIXct(x = activity.0)
as.POSIXct(x = activity.0$date)
as.POSIXct(x = c(activity.0$date,activity.0$interval))
c(activity.0$date,activity.0$interval)
plot(x = activity.1$steps, y = activity.1$interval)
plot(x = activity.1$interval, y = activity.1$steps)
plot(x = activity.1$interval, y = activity.1$steps, type = "l")
plot(x = activity.1$interval, y = mean(activity.1$steps), type = "l")
activity.byinterval <- data.table(activity.1)[, list(average.steps = mean(steps)), by = interval]
plot(x = activity.interval$interval, y = activity.byinterval$average.steps, type = "l")
plot(x = activity.byinterval$interval, y = activity.byinterval$average.steps, type = "l")
View(activity.byinterval)
plot(x = activity.byinterval$interval, y = activity.byinterval$average.steps, type = "l", xlab = "Interval", ylab = "Average steps", main = "Average number of steps take averaged across all days")
activity.byinterval[interval == max(average.steps)]
activity.byinterval[interval == max(average.steps),]
activity.byinterval[activity.byinterval$interval == max(activity.byinterval$average.steps),]
activity.byinterval[activity.byinterval$average.steps == max(activity.byinterval$average.steps),]
is.na(activity.0$steps)
sum(is.na(activity.0$steps))
for (i in 1:5) {
if (activity.0[1,i] == NA) {
print("yes")
}
}
for (i in 1:5) {
if (is.na(activity.0[1,i])) {
print("yes")
}
}
for (i in 1:5) {
if (is.na(activity.0[i,1])) {
print("yes")
}
}
activity.2 <- activity.0
for (i in 1:rows(activity.2)) {
if (is.na(activity.2[i,1])) {
activity.2[i,1] <- "needs replacing"
}
}
rows(activity.2)
row(activity.2)
for (i in 1:row(activity.2)) {
if (is.na(activity.2[i,1])) {
activity.2[i,1] <- "needs replacing"
}
}
View(activity.2)
for (i in 1:5) {
if (is.na(activity.2[i,1])) {
activity.2[i,1] <- "needs replacing"
}
}
row(activity.2)
length(activity.2$steps)
for (i in 1:nrow(activity.2)) {
if (is.na(activity.2[i,1])) {
activity.2[i,1] <- "needs replacing"
}
}
for (i in 1:nrow(activity.2)) {
if (is.na(activity.2[i,1])) {
activity.2[i,1] <- activity.byinterval[which(activity.2$interval[i] == activity.byinterval$interval),]$average.steps
}
}
View(activity.2)
activity.2 <- activity.0
for (i in 1:nrow(activity.2)) {
if (is.na(activity.2[i,1])) {
activity.2[i,1] <- activity.byinterval[which(activity.2$interval[i] == activity.byinterval$interval),]$average.steps
}
}
mean(activity.bydate2$total.steps) == mean(activity.bydate2$total.steps)
mean(activity.bydate2$total.steps)
view(activity.bydate2)
---
title: 'Reproducible Research: Peer Assessment 1'
output:
html_document:
keep_md: yes
word_document: default
---
## Loading and preprocessing the data
```{r, echo = FALSE}
# Set local working directory for my computer
setwd("/media/sf_Dropbox/Technology/R/coursera/5 Reproducible Research/assignment1/RepData_PeerAssessment1")
```
```{r, echo = TRUE}
# Code for: Load the data (i.e. read.csv())
activity.0 <- read.csv(unz("activity.zip", "activity.csv")) # Original data set
# activity.0$date <- as.Date(activity.0$date)
activity.1 <- na.omit(activity.0) # Data set with NA omitted
```
## What is mean total number of steps taken per day?
Using the data table package to consider the total number of steps taken each day, and average them. Remove NA values, use na.omit and summate the activity data by date
```{r, echo = TRUE}
require(data.table)
# Code for: Calculate the total number of steps taken per day
activity.bydate <- data.table(activity.1)[, list(total.steps = sum(steps)), by = date]
head(activity.bydate)
```
```{r, echo = TRUE}
# Code for: If you do not understand the difference between a histogram and a barplot, research the difference between them. Make a histogram of the total number of steps taken each day
hist(activity.bydate$total.steps, breaks = 20, xlab = "Steps per day", main = "Total number of steps taken each day")
```
Calculate the mean and median of the total number of steps taken per day
```{r, echo = TRUE}
# Code for: Calculate and report the mean and median of the total number of steps taken per day
mean(activity.bydate$total.steps)
median(activity.bydate$total.steps)
```
## What is the average daily activity pattern?
```{r, echo = TRUE}
# Code for: Make a time series plot (i.e. type = "l") of the 5-minute interval (x-axis) and the average number of steps taken, averaged across all days (y-axis)
activity.byinterval <- data.table(activity.1)[, list(average.steps = mean(steps)), by = interval]
head(activity.byinterval)
plot(x = activity.byinterval$interval, y = activity.byinterval$average.steps, type = "l", xlab = "Interval", ylab = "Average steps", main = "Average number of steps taken averaged across all days")
# Code for: Which 5-minute interval, on average across all the days in the dataset, contains the maximum number of steps?
activity.byinterval[activity.byinterval$average.steps == max(activity.byinterval$average.steps),]
```
## Imputing missing values
```{r, echo = TRUE}
# Code for: Calculate and report the total number of missing values in the dataset (i.e. the total number of rows with NAs)
sum(is.na(activity.0$steps))
# Code for: Devise a strategy for filling in all of the missing values in the dataset. The strategy does not need to be sophisticated. For example, you could use the mean/median for that day, or the mean for that 5-minute interval, etc.
activity.2 <- activity.0
# A for loop going through each row in our dataset, and replacing NA values with the average value across that time interval.
for (i in 1:nrow(activity.2)) {
if (is.na(activity.2[i,1])) {
activity.2[i,1] <- activity.byinterval[which(activity.2$interval[i] == activity.byinterval$interval),]$average.steps
}
}
# Code for: Create a new dataset that is equal to the original dataset but with the missing data filled in.
# Dataset created as part of question above (activity.2)
head(activity.2)
# Code for: Make a histogram of the total number of steps taken each day and Calculate and report the mean and median total number of steps taken per day. Do these values differ from the estimates from the first part of the assignment? What is the impact of imputing missing data on the estimates of the total daily number of steps?
activity.bydate2 <- data.table(activity.2)[, list(total.steps = sum(steps)), by = date]
head(activity.bydate2)
hist(activity.bydate2$total.steps, breaks = 20, xlab = "Steps per day", main = "Total number of steps taken each day (NA Imputed)")
```
Calculate the mean and median of the total number of steps taken per day
```{r, echo = TRUE}
# Code for: Calculate and report the mean and median of the total number of steps taken per day
mean(activity.bydate2$total.steps)
median(activity.bydate2$total.steps)
```
Do these values differ from the estimates from the first part of the assignment?
```{r, echo = TRUE}
# Check if they are they same:
mean(activity.bydate2$total.steps) == mean(activity.bydate$total.steps)
median(activity.bydate2$total.steps) == median(activity.bydate$total.steps)
```
The mean is the same but the median is slightly higher.
```{r, echo = TRUE}
median(activity.bydate2$total.steps) - median(activity.bydate$total.steps)
```
To be expected because we are using data from our average-in-that-time-period set to impute our missing values. Median per day is higher because we were previously excluding our missing values (they were not considered in our previous calculations).
## Are there differences in activity patterns between weekdays and weekends?
```{r, echo = TRUE}
# Use dataset with filled in missing values
activity.3 <- activity.2
date(activity.3)
```
date(activity.3$date)
as.Date(activity.3$date)
weekday(as.Date(activity.3$date))
weekdays(as.Date(activity.3$date))
activity.3$day <- weekdays(as.Date(activity.3$date))
View(activity.3)
weekday <- c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday")
weekend <- c("Saturday", "Sunday")
grepl(weekday, activity.3$day)
activity.3$date <- weekdays(as.Date(activity.3$date))
activity.3 <- activity.2
activity.3$date <- weekdays(as.Date(activity.3$date))
activity.3$date <- weekdays(as.Date(activity.3$date))
activity.3 <- activity.2
activity.3$date <- weekdays(as.Date(activity.3$date))
weekday <- c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday")
weekend <- c("Saturday", "Sunday")
for (i in 1:nrow(activity.3)) {
if (grepl(weekday, activity.3[i,2])) {
activity.3$day <- "weekday"
}
else if (grepl(weekend, activity.3$date)) {
activity.3$day <- "weekend"
}
}
activity.3 <- activity.2
activity.3$date <- weekdays(as.Date(activity.3$date))
for (i in 1:nrow(activity.3)) {
if (grepl(weekday, activity.3[i,2])) {
activity.3$day <- "weekday"
}
else if (grepl(weekend, activity.3[i,2])) {
activity.3$day <- "weekend"
}
}
for (i in 1:nrow(activity.3)) {
if (grepl(pattern = paste(weekday, collapse = "|"), activity.3[i,2])) {
activity.3$day <- "weekday"
}
else if (grepl(paste(weekend, collapse = "|"), activity.3[i,2])) {
activity.3$day <- "weekend"
}
}
View(activity.3)
for (i in 1:nrow(activity.3)) {
if (grepl(pattern = paste(weekday, collapse = "|"), activity.3[i,2])) {
activity.3[i,4] <- "weekday"
}
else if (grepl(pattern = paste(weekend, collapse = "|"), activity.3[i,2])) {
activity.3[i,4] <- "weekend"
}
}
activity.3 <- activity.2
activity.3$day <- weekdays(as.Date(activity.3$date))
weekday <- c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday")
weekend <- c("Saturday", "Sunday")
for (i in 1:nrow(activity.3)) {
if (grepl(pattern = paste(weekday, collapse = "|"), activity.3[i,4])) {
activity.3[i,4] <- "weekday"
}
else if (grepl(pattern = paste(weekend, collapse = "|"), activity.3[i,4])) {
activity.3[i,4] <- "weekend"
}
}
activity.byinterval3 <- data.table(activity.3)[, list(average.steps = mean(steps)), by = interval]
head(activity.byinterval3)
activity.byinterval3 <- data.table(activity.3)[, list(average.steps = mean(steps)), by = interval ~ weekday]
activity.byinterval3 <- data.table(activity.3[day == "weekday"])[, list(average.steps = mean(steps)), by = interval]
activity.byinterval3 <- data.table(activity.3[day == "weekday"],)[, list(average.steps = mean(steps)), by = interval]
activity.3[day == "weekday",]
activity.3[activity.3$day == "weekday",]
activity.byinterval3 <- data.table(activity.3[activity.3$day == "weekday"],)[, list(average.steps = mean(steps)), by = interval]
activity.byinterval3 <- data.table(activity.3[activity.3]$day == "weekday"],)[, list(average.steps = mean(steps)), by = interval]
activity.byinterval3 <- data.table(activity.3)[, list(average.steps = mean(steps)), by = interval]
activity.byinterval3 <- data.table(activity.3[activity.3$day == "weekday",])[, list(average.steps = mean(steps)), by = interval]
head(activity.byinterval3)
activity.byinterval.weekday <- data.table(activity.3[activity.3$day == "weekday",])[, list(average.steps = mean(steps)), by = interval]
activity.byinterval.weekend <- data.table(activity.3[activity.3$day == "weekend",])[, list(average.steps = mean(steps)), by = interval]
plot(x = activity.byinterval.weekday$interval, y = activity.byinterval.weekday$average.steps, type = "l", xlab = "Interval", ylab = "Average steps", main = "Average number of steps taken averaged across weekdays")
plot(x = activity.byinterval.end$interval, y = activity.byinterval.weekend$average.steps, type = "l", xlab = "Interval", ylab = "Average steps", main = "Average number of steps taken averaged across weekendss")
plot(x = activity.byinterval.weekend$interval, y = activity.byinterval.weekend$average.steps, type = "l", xlab = "Interval", ylab = "Average steps", main = "Average number of steps taken averaged across weekendss")
plot(x = activity.byinterval.weekday$interval, y = activity.byinterval.weekday$average.steps, type = "l", xlab = "Interval", ylab = "Average steps", main = "Average number of steps taken averaged across weekdays")
plot(x = activity.byinterval.weekend$interval, y = activity.byinterval.weekend$average.steps, type = "l", xlab = "Interval", ylab = "Average steps", main = "Average number of steps taken averaged across weekendss")
plot(x = activity.byinterval.weekday$interval, y = activity.byinterval.weekday$average.steps, type = "l", xlab = "Interval", ylab = "Average steps", main = "Average number of steps taken averaged across weekdays")
lines(x = activity.byinterval.weekend$interval, y = activity.byinterval.weekend$average.steps, type = "l")
plot(x = activity.byinterval.weekday$interval, y = activity.byinterval.weekday$average.steps, type = "l", xlab = "Interval", ylab = "Average steps", main = "Average number of steps taken averaged across weekdays", col = "red")
lines(x = activity.byinterval.weekend$interval, y = activity.byinterval.weekend$average.steps, type = "l", col = "blue")
legend(x = 1, y = 1, legend = c("Weekdays", "Weekends"), col = c("red", "blue"))
legend(x = 10, y = 10, legend = c("Weekdays", "Weekends"), col = c("red", "blue"))
legend(x = 10, y = 10, legend = c("Weekdays", "Weekends"), col = c("red", "blue"), pch = 16)
legend(topright, legend = c("Weekdays", "Weekends"), col = c("red", "blue"), pch = 16)
legend("topright", legend = c("Weekdays", "Weekends"), col = c("red", "blue"), pch = 16)
legend("topright", legend = c("Weekdays", "Weekends"), col = c("red", "blue"), pch = 10)
legend("topright", legend = c("Weekdays", "Weekends"), col = c("red", "blue"), lwd = 2)
legend("topleft", legend = c("Weekdays", "Weekends"), col = c("red", "blue"), lwd = 2)
plot(x = activity.byinterval.weekday$interval, y = activity.byinterval.weekday$average.steps, type = "l", xlab = "Interval", ylab = "Average steps", main = "Average number of steps taken averaged (weekdays/weekends)", col = "red")
lines(x = activity.byinterval.weekend$interval, y = activity.byinterval.weekend$average.steps, type = "l", col = "blue")
legend("topleft", legend = c("Weekdays", "Weekends"), col = c("red", "blue"), lwd = 2)
legend("topleft", legend = c("Weekdays", "Weekends"), col = c("red", "blue"), lwd = 2, cex = 0.75)
plot(x = activity.byinterval.weekday$interval, y = activity.byinterval.weekday$average.steps, type = "l", xlab = "Interval", ylab = "Average steps", main = "Average number of steps taken averaged (weekdays/weekends)", col = "red")
lines(x = activity.byinterval.weekend$interval, y = activity.byinterval.weekend$average.steps, type = "l", col = "blue")
legend("topleft", legend = c("Weekdays", "Weekends"), col = c("red", "blue"), lwd = 2, cex = 0.75)
plot(x = activity.byinterval.weekday$interval, y = activity.byinterval.weekday$average.steps, type = "l", xlab = "Interval", ylab = "Average steps", main = "Average number of steps taken averaged (weekdays/weekends)", col = "red")
lines(x = activity.byinterval.weekend$interval, y = activity.byinterval.weekend$average.steps, type = "l", col = "blue")
legend("topleft", legend = c("Weekdays", "Weekends"), col = c("red", "blue"), lwd = 2, cex = 0.25)
legend("topleft", legend = c("Weekdays", "Weekends"), col = c("red", "blue"), lwd = 2, cex = 0.25, pt.cex = 2)
legend("topleft", legend = c("Weekdays", "Weekends"), col = c("red", "blue"), lwd = 2, cex = 0.25, title.cex = 2)
plot(x = activity.byinterval.weekday$interval, y = activity.byinterval.weekday$average.steps, type = "l", xlab = "Interval", ylab = "Average steps", main = "Average number of steps taken averaged (weekdays/weekends)", col = "red")
lines(x = activity.byinterval.weekend$interval, y = activity.byinterval.weekend$average.steps, type = "l", col = "blue")
legend("topleft", legend = c("Weekdays", "Weekends"), col = c("red", "blue"), lwd = 2, cex = 0.25, title.cex = 2)
legend("topleft", legend = c("Weekdays", "Weekends"), col = c("red", "blue"), lwd = 2, cex = 0.5)
legend("topleft", legend = c("Weekdays", "Weekends"), col = c("red", "blue"), lwd = 2, cex = 0.5, pt.cex = 1)
legend("topleft", legend = c("Weekdays", "Weekends"), col = c("red", "blue"), lwd = 2, cex = 1, pt.cex = 0.5)
legend("topleft", legend = c("Weekdays", "Weekends"), col = c("red", "blue"), lwd = 1, cex = 1, pt.cex = 0.5)
legend("topleft", legend = c("Weekdays", "Weekends"), col = c("red", "blue"), lwd = 1, pch = 1, cex = 1, pt.cex = 0.5)
legend("topleft", legend = c("Weekdays", "Weekends"), col = c("red", "blue"), pch = 1, cex = 1, pt.cex = 0.5)
legend("topleft", legend = c("Weekdays", "Weekends"), col = c("red", "blue"), lwd = 1, cex = 1, pt.cex = 0.5)
legend("topleft", legend = c("Weekdays", "Weekends"), col = c("red", "blue"), lwd = 1, lty = 1,cex = 1, pt.cex = 0.5)
legend("topleft", legend = c("Weekdays", "Weekends"), col = c("red", "blue"), lwd = 1, lty = 2, cex = 1, pt.cex = 0.5)
legend("topleft", legend = c("Weekdays", "Weekends"), col = c("red", "blue"), lwd = 1, lty = 3, cex = 1, pt.cex = 0.5)
legend("topleft", legend = c("Weekdays", "Weekends"), col = c("red", "blue"), lty = 1, cex = 1, pt.cex = 0.5)
legend("topleft", legend = c("Weekdays", "Weekends"), col = c("red", "blue"), lty = 1, cex = 0.7)
plot(x = activity.byinterval.weekday$interval, y = activity.byinterval.weekday$average.steps, type = "l", xlab = "Interval", ylab = "Average steps", main = "Average number of steps taken averaged (weekdays/weekends)", col = "red")
lines(x = activity.byinterval.weekend$interval, y = activity.byinterval.weekend$average.steps, type = "l", col = "blue")
legend("topleft", legend = c("Weekdays", "Weekends"), col = c("red", "blue"), lty = 1, cex = 0.7)
legend("topleft", legend = c("Weekdays", "Weekends"), col = c("red", "blue"), lty = 1, cex = 0.7, y.intersp = 0.5)
legend("topleft", legend = c("Weekdays", "Weekends"), col = c("red", "blue"), lty = 1, cex = 0.7, y.intersp = 0.3, x.intersp = 0.5)
legend("topleft", legend = c("Weekdays", "Weekends"), col = c("red", "blue"), lty = 1, cex = 0.7, y.intersp = 0.3, x.intersp = 0.5, border = 0)
plot(x = activity.byinterval.weekday$interval, y = activity.byinterval.weekday$average.steps, type = "l", xlab = "Interval", ylab = "Average steps", main = "Average number of steps taken averaged (weekdays/weekends)", col = "red")
lines(x = activity.byinterval.weekend$interval, y = activity.byinterval.weekend$average.steps, type = "l", col = "blue")
legend("topleft", legend = c("Weekdays", "Weekends"), col = c("red", "blue"), lty = 1, cex = 0.7, y.intersp = 0.3, x.intersp = 0.5, border = 0)
legend("topleft", legend = c("Weekdays", "Weekends"), col = c("red", "blue"), lty = 1, cex = 0.7, y.intersp = 0.3, x.intersp = 0.5, bty = "n")
plot(x = activity.byinterval.weekday$interval, y = activity.byinterval.weekday$average.steps, type = "l", xlab = "Interval", ylab = "Average steps", main = "Average number of steps taken averaged (weekdays/weekends)", col = "red")
lines(x = activity.byinterval.weekend$interval, y = activity.byinterval.weekend$average.steps, type = "l", col = "blue")
legend("topleft", legend = c("Weekdays", "Weekends"), col = c("red", "blue"), lty = 1, cex = 0.7, y.intersp = 0.3, x.intersp = 0.5, bty = "n")
legend("topright", legend = c("Weekdays", "Weekends"), col = c("red", "blue"), lty = 1, cex = 0.7, y.intersp = 0.3, x.intersp = 0.5, bty = "n")
#plot(x = activity.byinterval.weekend$interval, y = activity.byinterval.weekend$average.steps, type = "l", xlab = "Interval", ylab = "Average steps", main = "Average number of steps taken averaged across weekendss")
plot(x = activity.byinterval.weekday$interval, y = activity.byinterval.weekday$average.steps, type = "l", xlab = "Interval", ylab = "Average steps", main = "Average number of steps taken averaged (weekdays/weekends)", col = "red")
lines(x = activity.byinterval.weekend$interval, y = activity.byinterval.weekend$average.steps, type = "l", col = "blue")
legend("topright", legend = c("Weekdays", "Weekends"), col = c("red", "blue"), lty = 1, cex = 0.7, y.intersp = 0.3, x.intersp = 0.5, bty = "n")
legend("topright", legend = c("Weekdays", "Weekends"), col = c("red", "blue"), lty = 1, cex = 0.7, y.intersp = 0.3, bty = "n")
plot(x = activity.byinterval.weekday$interval, y = activity.byinterval.weekday$average.steps, type = "l", xlab = "Interval", ylab = "Average steps", main = "Average number of steps taken averaged (weekdays/weekends)", col = "red")
lines(x = activity.byinterval.weekend$interval, y = activity.byinterval.weekend$average.steps, type = "l", col = "blue")
legend("topright", legend = c("Weekdays", "Weekends"), col = c("red", "blue"), lty = 1, cex = 0.7, y.intersp = 0.3, bty = "n")
